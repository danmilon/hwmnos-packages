#!/bin/sh /etc/rc.common

# load functions to use UCI
# see http://wiki.openwrt.org/doc/devel/config-scripting
. /lib/functions.sh

# start before networking
START=18
USE_PROCD=1

start_service() {
    reload_service
}

restart_service() {
    reload_service
}

get_ipv4_subnet() {
    uci_get hwmn @network[0] ipv4_subnet ''
}

get_node_name() {
    uci_get hwmn @generic[0] node_name
}


setup_lan() {
    local ipv4_subnet=$(get_ipv4_subnet)
    if [[ ! -n "$ipv4_subnet" ]]; then
        logger "hwmn.network.ipv4_subnet not set, skipping lan setup"
	return
    fi
    # TODO: VLAN?
    uci_set network lan ifname "eth0"
    uci_set network lan type bridge
    uci_set network lan proto static
    # set /24 lan subnet
    local ipv4_base=$(echo "$ipv4_subnet" | sed  's/\/.*//')
    export $(ipcalc.sh "$ipv4_base/26" 0 255)
    uci_set network lan ipaddr "$START"
    uci_set network lan netmask "$NETMASK"
    # reload services that depend on uci changes
    uci commit
    reload_config
}

setup_dnsmasq() {
    local ipv4_subnet=$(get_ipv4_subnet)
    local hostname=$(get_node_name)
    # set dnsmasq
    uci_set dhcp '@dnsmasq[0]' domainneeded 1
    uci_set dhcp '@dnsmasq[0]' nonegcache 1
    uci_set dhcp '@dnsmasq[0]' rebind_protection 0

    if [[ ! -n "$hostname" ]]; then
	logger "hwmn.generic.node_name not set, will not configure dnsmasq domain"
    else
	logger "hwmn.generic-node_name set, will configure dnsmasq domain"
	uci_set dhcp '@dnsmasq[0]' local "/$hostname.node.her.wn/"
	uci_set dhcp '@dnsmasq[0]' domain "$hostname.node.her.wn"
    fi

    uci_commit dhcp
    if [[ ! -n "$ipv4_subnet" ]]; then
	logger "hwmn.network.ipv4_subnet not set, skipping dnsmasq auth setup"
	if [[ -f "/etc/dnsmasq.conf.bak" ]]; then
	    logger "reverting to backed up dnsmasq configuration /etc/dnsmasq.conf.bak"
	    mv /etc/dnsmasq.conf.bak /etc/dnsmasq.conf
	fi
    else
	logger "hwmn.network.ipv4_subnet is set, configuring dnsmasq auth"
	cp /etc/dnsmasq.conf /etc/dnsmasq.conf.bak
	# get start ip for given range
	export $(ipcalc.sh "$ipv4_subnet" 0 255)
	cat >/etc/dnsmasq.conf <<EOF
# FILE GENERATED BY HWMN SERVICE. DO NOT EDIT!
auth-server=ns.${hostname}.node.her.wn,eth0
auth-zone=${hostname}.node.her.wn,${ipv4_subnet}
EOF
    fi
    # reload services that depend on uci changes
    reload_config

    # reload dnsmasq explicitly in case we changed only /etc/dnsmasq.conf in
    # which case reload_config wont reload it
    /etc/init.d/dnsmasq reload
}

setup_link() {
    local section="$1"
    local dest_name
    local ipv4_subnet
    local ifname
    config_get dest_name "$section" "destination_node_name"
    config_get ipv4_subnet "$section" "ipv4_subnet"
    config_get ifname "$section" "ifname"
    local ifvname="link_$dest_name"

    uci_set network "$ifvname" interface
    uci_set network "$ifvname" proto static
    uci_set network "$ifvname" ifname "$ifname"

    export $(ipcalc.sh "$ipv4_subnet" 0 255)
    uci_set network "$ifvname" ipaddr "$START"
    uci_set network "$ifvname" netmask "$NETMASK"
}


setup_links() {
    config_load hwmn
    config_foreach setup_link link
    uci commit
    reload_config
}

reload_service() {
    # do not run if we are disabled by hwmn.generic.enabled
    # if option does not exist, assume disabled (4th argument)
    local enabled
    uci_get hwmn @generic[0] enabled 0
    [[ $enabled == 0 ]] && exit 0

    setup_dnsmasq
    setup_lan
    setup_links
}


service_triggers() {
    # reload on /etc/config/hwmn changes (uci)
    procd_add_reload_trigger hwmn
}
